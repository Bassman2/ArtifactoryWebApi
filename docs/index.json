{
  "index.html": {
    "href": "index.html",
    "title": "This is the HOMEPAGE. | ArtifactoryWebApi",
    "summary": "This is the HOMEPAGE. Refer to Markdown for how to write markdown files. Quick Start Notes: Add images to the images folder if the file is referencing an image."
  },
  "reference/ArtifactoryWebApi.AdminPrivileges.html": {
    "href": "reference/ArtifactoryWebApi.AdminPrivileges.html",
    "title": "Class AdminPrivileges | ArtifactoryWebApi",
    "summary": "Class AdminPrivileges Namespace ArtifactoryWebApi Assembly ArtifactoryWebApi.dll Represents the administrative privileges for managing members, resources, and indexing resources. public class AdminPrivileges Inheritance object AdminPrivileges Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties IndexResources Gets a value indicating whether the user has privileges to index resources. public bool? IndexResources { get; } Property Value bool? ManageMembers Gets a value indicating whether the user has privileges to manage members. public bool? ManageMembers { get; } Property Value bool? ManageResources Gets a value indicating whether the user has privileges to manage resources. public bool? ManageResources { get; } Property Value bool?"
  },
  "reference/ArtifactoryWebApi.Artifactory.html": {
    "href": "reference/ArtifactoryWebApi.Artifactory.html",
    "title": "Class Artifactory | ArtifactoryWebApi",
    "summary": "Class Artifactory Namespace ArtifactoryWebApi Assembly ArtifactoryWebApi.dll Represents a client for interacting with the Artifactory API, providing methods for managing projects, repositories, storage, and more. public sealed class Artifactory : JsonService, IDisposable Inheritance object WebService JsonService Artifactory Implements IDisposable Inherited Members WebService.Dispose() WebService.Host WebService.IsConnected WebService.GetVersionAsync(CancellationToken) WebService.CombineUrl(params string[]) WebService.CombineUrl(string, params (string Name, object Value)[]) WebService.CombineUrl(string, string, params (string Name, object Value)[]) WebService.CombineUrl(string, string, string, params (string Name, object Value)[]) WebService.CombineUrl(string, string, string, string, params (string Name, object Value)[]) WebService.CombineUrl(string, string, string, string, string, params (string Name, object Value)[]) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors Artifactory(string, string) Initializes a new instance of the Artifactory class using a store key and application name. public Artifactory(string storeKey, string appName) Parameters storeKey string The key used to store authentication or configuration data. appName string The name of the application using the GitHub API. Artifactory(Uri, IAuthenticator?, string) Initializes a new instance of the Artifactory class using a host URI, an optional authenticator, and an application name. public Artifactory(Uri host, IAuthenticator? authenticator, string appName) Parameters host Uri The base URI of the GitHub API host. authenticator IAuthenticator The authenticator used for API authentication, or null for unauthenticated access. appName string The name of the application using the GitHub API. Properties AuthenticationTestUrl Gets the URL used to test authentication with the Artifactory API. protected override string? AuthenticationTestUrl { get; } Property Value string Methods CopyAsync(string, string, string, string, CancellationToken) Copies an item (file or folder) from a source repository and path to a destination repository and path in the Artifactory system. public Task CopyAsync(string sourceRepo, string sourcePath, string destinationRepo, string destinationPath, CancellationToken cancellationToken = default) Parameters sourceRepo string The name of the source repository where the item is currently located. sourcePath string The path of the item within the source repository. destinationRepo string The name of the destination repository where the item will be copied. destinationPath string The path within the destination repository where the item will be copied. cancellationToken CancellationToken A token to cancel the operation. Returns Task A task that represents the asynchronous operation. CreateProjectAsync(string, string, string, CancellationToken) Creates a new project in the Artifactory system. public Task<Project?> CreateProjectAsync(string projectKey, string displayName, string descriptions, CancellationToken cancellationToken = default) Parameters projectKey string The unique key for the new project. displayName string The display name of the project. descriptions string The description of the project. cancellationToken CancellationToken A token to cancel the operation. Returns Task<Project> A task that represents the asynchronous operation. The task result contains the created project. DeleteAsync(string, string, CancellationToken) Deletes an item (file or folder) from a specified repository and path in the Artifactory system. public Task DeleteAsync(string repoKey, string path, CancellationToken cancellationToken = default) Parameters repoKey string The name of the repository where the item is located. path string The path of the item within the repository to be deleted. cancellationToken CancellationToken A token to cancel the operation. Returns Task A task that represents the asynchronous operation. DeleteProjectAsync(string, CancellationToken) Deletes a project from the Artifactory system. public Task DeleteProjectAsync(string projectKey, CancellationToken cancellationToken = default) Parameters projectKey string The unique key of the project to delete. cancellationToken CancellationToken A token to cancel the operation. Returns Task A task that represents the asynchronous operation. DeleteRepositoryAsync(string, CancellationToken) Deletes a repository from the Artifactory system. public Task DeleteRepositoryAsync(string repoKey, CancellationToken cancellationToken = default) Parameters repoKey string The unique key of the repository to delete. cancellationToken CancellationToken A token to cancel the operation. Returns Task A task that represents the asynchronous operation. DownloadFileAsync(string, string, string, CancellationToken) Downloads a file from the Artifactory system to a specified local path. public Task DownloadFileAsync(string repo, string path, string filePath, CancellationToken cancellationToken = default) Parameters repo string The repository where the file is located. path string The path of the file within the repository. filePath string The local file path to save the downloaded file. cancellationToken CancellationToken A token to cancel the operation. Returns Task A task that represents the asynchronous operation. DownloadFileAsync(Uri, string, CancellationToken) Downloads a file from a specified URL to a local path. public Task DownloadFileAsync(Uri url, string filePath, CancellationToken cancellationToken = default) Parameters url Uri The URL of the file to download. filePath string The local file path to save the downloaded file. cancellationToken CancellationToken A token to cancel the operation. Returns Task A task that represents the asynchronous operation. ErrorHandlingAsync(HttpResponseMessage, string, CancellationToken) Handles errors returned from HTTP responses by reading the error content and throwing a WebServiceException. protected override Task ErrorHandlingAsync(HttpResponseMessage response, string memberName, CancellationToken cancellationToken) Parameters response HttpResponseMessage The HTTP response message containing the error. memberName string The name of the member where the error occurred. cancellationToken CancellationToken A token to monitor for cancellation requests. Returns Task A task that represents the asynchronous operation. ExistsAsync(string, string, CancellationToken) Checks if an item (file or folder) exists in a specified repository and path in the Artifactory system. public Task<bool> ExistsAsync(string repo, string path, CancellationToken cancellationToken = default) Parameters repo string The name of the repository where the item is located. path string The path of the item within the repository to check for existence. cancellationToken CancellationToken A token to cancel the operation. Returns Task<bool> A task that represents the asynchronous operation. The task result contains a boolean indicating whether the item exists. ExistsRepositoryAsync(string, CancellationToken) Checks if a repository exists in the Artifactory system. public Task<bool> ExistsRepositoryAsync(string repoKey, CancellationToken cancellationToken = default) Parameters repoKey string The unique key of the repository. cancellationToken CancellationToken A token to cancel the operation. Returns Task<bool> A task that represents the asynchronous operation. The task result contains a boolean indicating whether the repository exists. GetFileInfoAsync(string, string, CancellationToken) Retrieves information about a file in the Artifactory system. public Task<Storage?> GetFileInfoAsync(string repoKey, string path, CancellationToken cancellationToken = default) Parameters repoKey string The repository where the file is located. path string The path of the file within the repository. cancellationToken CancellationToken A token to cancel the operation. Returns Task<Storage> A task that represents the asynchronous operation. The task result contains the file information. GetFileListAsync(string, string, bool, int, bool, bool, bool, CancellationToken) Retrieves a list of files in a specific storage location. public Task<StorageList?> GetFileListAsync(string repoKey, string path, bool deep, int depth, bool listFolders, bool mdTimestamps, bool includeRootPath, CancellationToken cancellationToken = default) Parameters repoKey string The repository where the storage location is located. path string The path of the storage location within the repository. deep bool Whether to perform a deep search. depth int The depth of the search. listFolders bool Whether to include folders in the list. mdTimestamps bool Whether to include metadata timestamps. includeRootPath bool Whether to include the root path in the list. cancellationToken CancellationToken A token to cancel the operation. Returns Task<StorageList> A task that represents the asynchronous operation. The task result contains the list of files. GetFileStatisticsAsync(string, string, CancellationToken) Retrieves statistics about a file in the Artifactory system. public Task<StorageStats?> GetFileStatisticsAsync(string repoKey, string path, CancellationToken cancellationToken = default) Parameters repoKey string The repository where the file is located. path string The path of the file within the repository. cancellationToken CancellationToken A token to cancel the operation. Returns Task<StorageStats> A task that represents the asynchronous operation. The task result contains the file statistics. GetFileStreamAsync(string, string, CancellationToken) Retrieves a file stream from the Artifactory system. public Task<Stream> GetFileStreamAsync(string repo, string path, CancellationToken cancellationToken = default) Parameters repo string The repository where the file is located. path string The path of the file within the repository. cancellationToken CancellationToken A token to cancel the operation. Returns Task<Stream> A task that represents the asynchronous operation. The task result contains the file stream. GetFileStreamAsync(Uri, CancellationToken) Retrieves a file stream from a specified URL. public Task<Stream> GetFileStreamAsync(Uri url, CancellationToken cancellationToken = default) Parameters url Uri The URL of the file to retrieve. cancellationToken CancellationToken A token to cancel the operation. Returns Task<Stream> A task that represents the asynchronous operation. The task result contains the file stream. GetFolderInfoAsync(string, string, CancellationToken) Retrieves information about a folder in the Artifactory system. public Task<Storage?> GetFolderInfoAsync(string repoKey, string path, CancellationToken cancellationToken = default) Parameters repoKey string The repository where the folder is located. path string The path of the folder within the repository. cancellationToken CancellationToken A token to cancel the operation. Returns Task<Storage> A task that represents the asynchronous operation. The task result contains the folder information. GetProjectAsync(string, CancellationToken) Retrieves a specific project by its key. public Task<Project?> GetProjectAsync(string projectKey, CancellationToken cancellationToken = default) Parameters projectKey string The unique key of the project. cancellationToken CancellationToken A token to cancel the operation. Returns Task<Project> A task that represents the asynchronous operation. The task result contains the project, or null if not found. GetProjectsAsync(CancellationToken) Retrieves a list of all projects in the Artifactory system. public Task<IEnumerable<Project>?> GetProjectsAsync(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken A token to cancel the operation. Returns Task<IEnumerable<Project>> A task that represents the asynchronous operation. The task result contains a collection of projects. GetRepositoriesAsync(CancellationToken) Retrieves a list of all repositories in the Artifactory system. public Task<IEnumerable<Repository>?> GetRepositoriesAsync(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken A token to cancel the operation. Returns Task<IEnumerable<Repository>> A task that represents the asynchronous operation. The task result contains a collection of repositories. GetRepositoryConfigurationAsync(string, CancellationToken) Retrieves the configuration of a specific repository. public Task<RepositoryConfiguration?> GetRepositoryConfigurationAsync(string repoKey, CancellationToken cancellationToken = default) Parameters repoKey string The unique key of the repository. cancellationToken CancellationToken A token to cancel the operation. Returns Task<RepositoryConfiguration> A task that represents the asynchronous operation. The task result contains the repository configuration, or null if not found. GetStorageInfoAsync(CancellationToken) Retrieves storage information for the Artifactory system, including repository summaries, file store details, and binary statistics. public Task<StorageInfo?> GetStorageInfoAsync(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken A token to cancel the operation. Returns Task<StorageInfo> A task that represents the asynchronous operation. The task result contains the storage information. GetVersionStringAsync(CancellationToken) Retrieves the version information of the Artifactory system. public override Task<string?> GetVersionStringAsync(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken A token to cancel the operation. Returns Task<string> A task that represents the asynchronous operation. The task result contains the ArtifactoryVersion information, or null if not available. MoveAsync(string, string, string, string, CancellationToken) Moves an item (file or folder) from a source repository and path to a destination repository and path in the Artifactory system. public Task MoveAsync(string sourceRepo, string sourcePath, string destinationRepo, string destinationPath, CancellationToken cancellationToken = default) Parameters sourceRepo string The name of the source repository where the item is currently located. sourcePath string The path of the item within the source repository. destinationRepo string The name of the destination repository where the item will be moved. destinationPath string The path within the destination repository where the item will be moved. cancellationToken CancellationToken A token to cancel the operation. Returns Task A task that represents the asynchronous operation. RefreshStorageInfoAsync(CancellationToken) Refreshes the storage information for the Artifactory system. public Task RefreshStorageInfoAsync(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken A token to cancel the operation. Returns Task A task that represents the asynchronous operation. UpdateRepositoryAsync(string, CancellationToken) Updates a repository in the Artifactory system. public Task<Repository?> UpdateRepositoryAsync(string repoKey, CancellationToken cancellationToken = default) Parameters repoKey string The unique key of the repository to update. cancellationToken CancellationToken A token to cancel the operation. Returns Task<Repository> A task that represents the asynchronous operation. The task result contains the updated repository. UploadFileAsync(string, string, Stream, CancellationToken) Uploads a file to the Artifactory system from a stream. public Task UploadFileAsync(string repo, string path, Stream fileStream, CancellationToken cancellationToken = default) Parameters repo string The repository where the file will be uploaded. path string The path within the repository to upload the file. fileStream Stream The stream containing the file data to upload. cancellationToken CancellationToken A token to cancel the operation. Returns Task A task that represents the asynchronous operation. UploadFileAsync(string, string, string, CancellationToken) Uploads a file to the Artifactory system from a local path. public Task UploadFileAsync(string repo, string path, string filePath, CancellationToken cancellationToken = default) Parameters repo string The repository where the file will be uploaded. path string The path within the repository to upload the file. filePath string The local file path of the file to upload. cancellationToken CancellationToken A token to cancel the operation. Returns Task A task that represents the asynchronous operation."
  },
  "reference/ArtifactoryWebApi.ArtifactoryVersion.html": {
    "href": "reference/ArtifactoryWebApi.ArtifactoryVersion.html",
    "title": "Class ArtifactoryVersion | ArtifactoryWebApi",
    "summary": "Class ArtifactoryVersion Namespace ArtifactoryWebApi Assembly ArtifactoryWebApi.dll Represents the version and revision information of the Artifactory server. public class ArtifactoryVersion Inheritance object ArtifactoryVersion Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties Revision Gets the revision of the Artifactory server. public string? Revision { get; } Property Value string Version Gets the version of the Artifactory server. public string? Version { get; } Property Value string Methods ToString() Returns a string that represents the current ArtifactoryVersion instance, combining the Version and Revision properties. public override string ToString() Returns string A string in the format \"Version.Revision\" representing the version and revision. Operators implicit operator Version(ArtifactoryVersion) Implicitly converts an ArtifactoryVersion to a Version. public static implicit operator Version(ArtifactoryVersion v) Parameters v ArtifactoryVersion The ArtifactoryVersion instance. Returns Version A Version instance representing the version and revision."
  },
  "reference/ArtifactoryWebApi.BinariesSummary.html": {
    "href": "reference/ArtifactoryWebApi.BinariesSummary.html",
    "title": "Class BinariesSummary | ArtifactoryWebApi",
    "summary": "Class BinariesSummary Namespace ArtifactoryWebApi Assembly ArtifactoryWebApi.dll Represents a summary of binary and artifact statistics. public class BinariesSummary Inheritance object BinariesSummary Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ArtifactsCount Gets the total number of artifacts. public string? ArtifactsCount { get; } Property Value string ArtifactsSize Gets the total size of artifacts. public string? ArtifactsSize { get; } Property Value string BinariesCount Gets the total number of binaries. public string? BinariesCount { get; } Property Value string BinariesSize Gets the total size of binaries. public string? BinariesSize { get; } Property Value string ItemsCount Gets the total number of items. public string? ItemsCount { get; } Property Value string Optimization Gets the optimization percentage of storage usage. public string? Optimization { get; } Property Value string"
  },
  "reference/ArtifactoryWebApi.Checksums.html": {
    "href": "reference/ArtifactoryWebApi.Checksums.html",
    "title": "Class Checksums | ArtifactoryWebApi",
    "summary": "Class Checksums Namespace ArtifactoryWebApi Assembly ArtifactoryWebApi.dll Represents the checksum values for a file or artifact. public class Checksums Inheritance object Checksums Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Md5 Gets the MD5 checksum of the file or artifact. public string? Md5 { get; } Property Value string Sha1 Gets the SHA-1 checksum of the file or artifact. public string? Sha1 { get; } Property Value string Sha256 Gets the SHA-256 checksum of the file or artifact. public string? Sha256 { get; } Property Value string"
  },
  "reference/ArtifactoryWebApi.Child.html": {
    "href": "reference/ArtifactoryWebApi.Child.html",
    "title": "Class Child | ArtifactoryWebApi",
    "summary": "Class Child Namespace ArtifactoryWebApi Assembly ArtifactoryWebApi.dll Represents a child resource, which can be either a file or a folder. public class Child Inheritance object Child Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties IsFolder Gets a value indicating whether the child resource is a folder. public bool IsFolder { get; } Property Value bool Uri Gets the URI of the child resource, which represents either a file or folder name (e.g., \"/folder\" or \"/file.txt\"). public string? Uri { get; } Property Value string"
  },
  "reference/ArtifactoryWebApi.File.html": {
    "href": "reference/ArtifactoryWebApi.File.html",
    "title": "Class File | ArtifactoryWebApi",
    "summary": "Class File Namespace ArtifactoryWebApi Assembly ArtifactoryWebApi.dll Represents a file or folder in the Artifactory system. public class File Inheritance object File Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Folder Gets a value indicating whether the item is a folder. public bool Folder { get; } Property Value bool LastModified Gets the last modified timestamp of the file or folder. public DateTime? LastModified { get; } Property Value DateTime? MdTimestamps Gets the metadata timestamps associated with the file or folder. public MdTimestamps? MdTimestamps { get; } Property Value MdTimestamps Name Gets the name of the file or folder, extracted from the URI. public string? Name { get; } Property Value string Sha1 Gets the SHA-1 checksum of the file. This is null for folders. public string? Sha1 { get; } Property Value string Sha2 Gets the SHA-2 checksum of the file. This is null for folders. public string? Sha2 { get; } Property Value string Size Gets the size of the file in bytes. This is null for folders. public long? Size { get; } Property Value long? Uri Gets the URI of the file or folder. This is not a full URI, but a relative path (e.g., \"/folder/file.xxx\"). public string? Uri { get; } Property Value string"
  },
  "reference/ArtifactoryWebApi.FileStoreSummary.html": {
    "href": "reference/ArtifactoryWebApi.FileStoreSummary.html",
    "title": "Class FileStoreSummary | ArtifactoryWebApi",
    "summary": "Class FileStoreSummary Namespace ArtifactoryWebApi Assembly ArtifactoryWebApi.dll Represents a summary of the file store, including storage type and directory information. public class FileStoreSummary Inheritance object FileStoreSummary Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties StorageDirectory Gets the directory path where the file store is located. public string? StorageDirectory { get; } Property Value string StorageType Gets the type of storage used for the file store (e.g., \"local\", \"cloud\"). public string? StorageType { get; } Property Value string"
  },
  "reference/ArtifactoryWebApi.JFrogVersion.html": {
    "href": "reference/ArtifactoryWebApi.JFrogVersion.html",
    "title": "Class JFrogVersion | ArtifactoryWebApi",
    "summary": "Class JFrogVersion Namespace ArtifactoryWebApi Assembly ArtifactoryWebApi.dll Represents the version information for a JFrog product or service. public class JFrogVersion Inheritance object JFrogVersion Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks This class is intended to encapsulate version details, such as major, minor, and patch numbers, for JFrog-related components. Use this type to manage and compare versioning information."
  },
  "reference/ArtifactoryWebApi.MdTimestamps.html": {
    "href": "reference/ArtifactoryWebApi.MdTimestamps.html",
    "title": "Class MdTimestamps | ArtifactoryWebApi",
    "summary": "Class MdTimestamps Namespace ArtifactoryWebApi Assembly ArtifactoryWebApi.dll Represents metadata timestamps associated with a file or folder. public class MdTimestamps Inheritance object MdTimestamps Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Properties Gets the timestamp of the metadata properties. public DateTime? Properties { get; } Property Value DateTime?"
  },
  "reference/ArtifactoryWebApi.PackageType.html": {
    "href": "reference/ArtifactoryWebApi.PackageType.html",
    "title": "Enum PackageType | ArtifactoryWebApi",
    "summary": "Enum PackageType Namespace ArtifactoryWebApi Assembly ArtifactoryWebApi.dll Represents the type of a package in the Artifactory system. [JsonConverter(typeof(JsonStringEnumConverter<PackageType>))] public enum PackageType Fields Bower = 1 Represents a Bower package. BuildInfo = 2 Represents build information. Cargo = 3 Represents a Cargo package. Chef = 4 Represents a Chef package. Cocoapods = 5 Represents a CocoaPods package. Composer = 6 Represents a Composer package. Conan = 7 Represents a Conan package. Cran = 8 Represents a CRAN package. Custom = 9 Represents a custom package type. Debian = 10 Represents a Debian package. Distribution = 11 Represents a distribution package. Docker = 12 Represents a Docker package. Gems = 13 Represents a RubyGems package. Generic = 35 Represents a generic package type. Gitlfs = 14 Represents a Git LFS (Large File Storage) package. Go = 15 Represents a Go package. Gradle = 16 Represents a Gradle package. Helm = 17 Represents a Helm package. Ivy = 18 Represents an Ivy package. Maven = 19 Represents a Maven package. NA = 0 Not applicable or unspecified package type. Npm = 20 Represents an NPM (Node Package Manager) package. NuGet = 21 Represents a NuGet package. Oci = 22 Represents an OCI (Open Container Initiative) package. Opkg = 23 Represents an Opkg package. P2 = 24 Represents a P2 package. Pub = 25 Represents a Pub package. Puppet = 26 Represents a Puppet package. Pypi = 27 Represents a PyPI (Python Package Index) package. Sbt = 28 Represents an SBT (Scala Build Tool) package. Swift = 29 Represents a Swift package. Terraform = 30 Represents a Terraform package. TerraformBackend = 31 Represents a Terraform backend package. Vagrant = 32 Represents a Vagrant package. Vcs = 33 Represents a VCS (Version Control System) package. Yum = 34 Represents a Yum package."
  },
  "reference/ArtifactoryWebApi.Project.html": {
    "href": "reference/ArtifactoryWebApi.Project.html",
    "title": "Class Project | ArtifactoryWebApi",
    "summary": "Class Project Namespace ArtifactoryWebApi Assembly ArtifactoryWebApi.dll Represents a project in the Artifactory system, including its metadata and administrative settings. public class Project Inheritance object Project Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties AdminPrivileges Gets the administrative privileges associated with the project. public AdminPrivileges? AdminPrivileges { get; } Property Value AdminPrivileges Description Gets the description of the project. public string? Description { get; } Property Value string DisplayName Gets the display name of the project. public string? DisplayName { get; } Property Value string ProjectKey Gets the unique key of the project. public string? ProjectKey { get; } Property Value string SoftLimit Gets a value indicating whether the project has a soft limit for storage usage. public bool? SoftLimit { get; } Property Value bool? StorageQuotaBytes Gets the storage quota allocated to the project, in bytes. public long? StorageQuotaBytes { get; } Property Value long? StorageQuotaEmailNotification Gets a value indicating whether email notifications are enabled for storage quota limits. public bool? StorageQuotaEmailNotification { get; } Property Value bool?"
  },
  "reference/ArtifactoryWebApi.RepositoriesSummary.html": {
    "href": "reference/ArtifactoryWebApi.RepositoriesSummary.html",
    "title": "Class RepositoriesSummary | ArtifactoryWebApi",
    "summary": "Class RepositoriesSummary Namespace ArtifactoryWebApi Assembly ArtifactoryWebApi.dll Represents a summary of a repository in the Artifactory system, including its metadata and usage statistics. public class RepositoriesSummary Inheritance object RepositoriesSummary Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties FilesCount Gets the number of files in the repository. public long? FilesCount { get; } Property Value long? FoldersCount Gets the number of folders in the repository. public long? FoldersCount { get; } Property Value long? ItemsCount Gets the total number of items (files and folders) in the repository. public long? ItemsCount { get; } Property Value long? PackageType Gets the type of packages stored in the repository (e.g., Maven, Docker, NPM). public PackageType? PackageType { get; } Property Value PackageType? Percentage Gets the percentage of storage used by the repository as a string (e.g., \"75%\"). public string? Percentage { get; } Property Value string ProjectKey Gets the project key associated with the repository. public string? ProjectKey { get; } Property Value string RepoKey Gets the unique key of the repository. public string? RepoKey { get; } Property Value string RepoType Gets the type of the repository (e.g., local, remote, virtual). public RepositoryType? RepoType { get; } Property Value RepositoryType? UsedSpace Gets the used space in the repository as a human-readable string (e.g., \"10 GB\"). public string? UsedSpace { get; } Property Value string UsedSpaceInBytes Gets the used space in the repository in bytes. public long? UsedSpaceInBytes { get; } Property Value long?"
  },
  "reference/ArtifactoryWebApi.Repository.html": {
    "href": "reference/ArtifactoryWebApi.Repository.html",
    "title": "Class Repository | ArtifactoryWebApi",
    "summary": "Class Repository Namespace ArtifactoryWebApi Assembly ArtifactoryWebApi.dll Represents a repository in the Artifactory system, including its metadata and configuration. public class Repository Inheritance object Repository Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Description Gets the description of the repository. public string? Description { get; } Property Value string Key Gets the unique key of the repository. public string Key { get; } Property Value string PackageType Gets the type of packages stored in the repository (e.g., Maven, Docker, NPM). public PackageType PackageType { get; } Property Value PackageType Type Gets the type of the repository (e.g., local, remote, virtual). public RepositoryType Type { get; } Property Value RepositoryType Url Gets the URL of the repository. public Uri? Url { get; } Property Value Uri"
  },
  "reference/ArtifactoryWebApi.RepositoryConfiguration.html": {
    "href": "reference/ArtifactoryWebApi.RepositoryConfiguration.html",
    "title": "Class RepositoryConfiguration | ArtifactoryWebApi",
    "summary": "Class RepositoryConfiguration Namespace ArtifactoryWebApi Assembly ArtifactoryWebApi.dll Represents the configuration of a repository in the Artifactory system. public class RepositoryConfiguration Inheritance object RepositoryConfiguration Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Description Gets the description of the repository. public string? Description { get; } Property Value string ExcludesPattern Gets the pattern used to exclude specific files or folders from the repository. public string? ExcludesPattern { get; } Property Value string IncludesPattern Gets the pattern used to include specific files or folders in the repository. public string? IncludesPattern { get; } Property Value string Key Gets the unique key of the repository. public string? Key { get; } Property Value string Notes Gets additional notes or metadata about the repository. public string? Notes { get; } Property Value string PackageType Gets the type of packages stored in the repository (e.g., Maven, Docker, NPM). public PackageType PackageType { get; } Property Value PackageType"
  },
  "reference/ArtifactoryWebApi.RepositoryType.html": {
    "href": "reference/ArtifactoryWebApi.RepositoryType.html",
    "title": "Enum RepositoryType | ArtifactoryWebApi",
    "summary": "Enum RepositoryType Namespace ArtifactoryWebApi Assembly ArtifactoryWebApi.dll Represents the type of a repository in the Artifactory system. [JsonConverter(typeof(JsonStringEnumConverter<RepositoryType>))] public enum RepositoryType Fields [EnumMember(Value = \"LOCAL\")] LOCAL = 0 Represents a local repository, which stores artifacts locally. [EnumMember(Value = \"NA\")] NA = 3 Represents a repository type that is not applicable or unspecified. [EnumMember(Value = \"REMOTE\")] Remote = 1 Represents a remote repository, which proxies artifacts from a remote source. [EnumMember(Value = \"VIRTUAL\")] Virtual = 2 Represents a virtual repository, which aggregates multiple repositories into a single logical repository."
  },
  "reference/ArtifactoryWebApi.Storage.html": {
    "href": "reference/ArtifactoryWebApi.Storage.html",
    "title": "Class Storage | ArtifactoryWebApi",
    "summary": "Class Storage Namespace ArtifactoryWebApi Assembly ArtifactoryWebApi.dll Represents storage information for a file or folder in the Artifactory system. public class Storage Inheritance object Storage Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Checksums Gets the checksum values of the file. public Checksums? Checksums { get; } Property Value Checksums Children Gets the list of child resources (files or folders) within the folder. public List<Child>? Children { get; } Property Value List<Child> Created Gets the creation timestamp of the file or folder. public DateTime? Created { get; } Property Value DateTime? CreatedBy Gets the user who created the file or folder. public string? CreatedBy { get; } Property Value string DownloadUri Gets the URI to download the file. public Uri DownloadUri { get; } Property Value Uri LastModified Gets the last modified timestamp of the file or folder. public DateTime? LastModified { get; } Property Value DateTime? LastUpdated Gets the last updated timestamp of the file or folder. public DateTime? LastUpdated { get; } Property Value DateTime? MimeType Gets the MIME type of the file. public string? MimeType { get; } Property Value string ModifiedBy Gets the user who last modified the file or folder. public string? ModifiedBy { get; } Property Value string Name Gets the name of the file or folder, extracted from the path. public string? Name { get; } Property Value string OriginalChecksums Gets the original checksum values of the file. public Checksums? OriginalChecksums { get; } Property Value Checksums Path Gets the path of the file or folder within the repository. public string? Path { get; } Property Value string Repo Gets the repository where the file or folder is stored. public string? Repo { get; } Property Value string Size Gets the size of the file as a string. public string? Size { get; } Property Value string Uri Gets the URI of the file or folder. public Uri? Uri { get; } Property Value Uri"
  },
  "reference/ArtifactoryWebApi.StorageInfo.html": {
    "href": "reference/ArtifactoryWebApi.StorageInfo.html",
    "title": "Class StorageInfo | ArtifactoryWebApi",
    "summary": "Class StorageInfo Namespace ArtifactoryWebApi Assembly ArtifactoryWebApi.dll Represents storage information in the Artifactory system, including repository summaries, file store details, and binary statistics. public class StorageInfo Inheritance object StorageInfo Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties BinariesSummary Gets the summary of binary and artifact statistics, including counts and sizes. public BinariesSummary? BinariesSummary { get; } Property Value BinariesSummary FileStoreSummary Gets the summary of the file store, including storage type and directory information. public FileStoreSummary? FileStoreSummary { get; } Property Value FileStoreSummary RepositoriesSummaryList Gets the list of repository summaries, including metadata and usage statistics for each repository. public List<RepositoriesSummary>? RepositoriesSummaryList { get; } Property Value List<RepositoriesSummary>"
  },
  "reference/ArtifactoryWebApi.StorageList.html": {
    "href": "reference/ArtifactoryWebApi.StorageList.html",
    "title": "Class StorageList | ArtifactoryWebApi",
    "summary": "Class StorageList Namespace ArtifactoryWebApi Assembly ArtifactoryWebApi.dll Represents a list of files in a specific storage location within the Artifactory system. public class StorageList Inheritance object StorageList Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Created Gets the creation timestamp of the storage list. public DateTime? Created { get; } Property Value DateTime? Files Gets the list of files in the storage location. public List<File>? Files { get; } Property Value List<File> Uri Gets the URI of the storage location. public Uri? Uri { get; } Property Value Uri"
  },
  "reference/ArtifactoryWebApi.StorageStats.html": {
    "href": "reference/ArtifactoryWebApi.StorageStats.html",
    "title": "Class StorageStats | ArtifactoryWebApi",
    "summary": "Class StorageStats Namespace ArtifactoryWebApi Assembly ArtifactoryWebApi.dll Represents statistics related to the storage and usage of a file or resource in the Artifactory system. public class StorageStats Inheritance object StorageStats Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties DownloadCount Gets the total number of times the resource has been downloaded. public long? DownloadCount { get; } Property Value long? LastDownloaded Gets the timestamp of the last time the resource was downloaded. public long? LastDownloaded { get; } Property Value long? LastDownloadedBy Gets the username of the user who last downloaded the resource. public string? LastDownloadedBy { get; } Property Value string RemoteDownloadCount Gets the total number of times the resource has been downloaded remotely. public long? RemoteDownloadCount { get; } Property Value long? RemoteLastDownloaded Gets the timestamp of the last time the resource was downloaded remotely. public long? RemoteLastDownloaded { get; } Property Value long? Uri Gets the URI of the resource. public Uri? Uri { get; } Property Value Uri"
  },
  "reference/ArtifactoryWebApi.html": {
    "href": "reference/ArtifactoryWebApi.html",
    "title": "Namespace ArtifactoryWebApi | ArtifactoryWebApi",
    "summary": "Namespace ArtifactoryWebApi Classes AdminPrivileges Represents the administrative privileges for managing members, resources, and indexing resources. Artifactory Represents a client for interacting with the Artifactory API, providing methods for managing projects, repositories, storage, and more. ArtifactoryVersion Represents the version and revision information of the Artifactory server. BinariesSummary Represents a summary of binary and artifact statistics. Checksums Represents the checksum values for a file or artifact. Child Represents a child resource, which can be either a file or a folder. File Represents a file or folder in the Artifactory system. FileStoreSummary Represents a summary of the file store, including storage type and directory information. JFrogVersion Represents the version information for a JFrog product or service. MdTimestamps Represents metadata timestamps associated with a file or folder. Project Represents a project in the Artifactory system, including its metadata and administrative settings. RepositoriesSummary Represents a summary of a repository in the Artifactory system, including its metadata and usage statistics. Repository Represents a repository in the Artifactory system, including its metadata and configuration. RepositoryConfiguration Represents the configuration of a repository in the Artifactory system. Storage Represents storage information for a file or folder in the Artifactory system. StorageInfo Represents storage information in the Artifactory system, including repository summaries, file store details, and binary statistics. StorageList Represents a list of files in a specific storage location within the Artifactory system. StorageStats Represents statistics related to the storage and usage of a file or resource in the Artifactory system. Enums PackageType Represents the type of a package in the Artifactory system. RepositoryType Represents the type of a repository in the Artifactory system."
  },
  "reference/WebServiceClient.ArgumentRequestUriException.html": {
    "href": "reference/WebServiceClient.ArgumentRequestUriException.html",
    "title": "Class ArgumentRequestUriException | ArtifactoryWebApi",
    "summary": "Class ArgumentRequestUriException Namespace WebServiceClient Assembly ArtifactoryWebApi.dll Exception thrown when the request URI argument is invalid. public class ArgumentRequestUriException : ArgumentException, ISerializable Inheritance object Exception SystemException ArgumentException ArgumentRequestUriException Implements ISerializable Inherited Members ArgumentException.ThrowIfNullOrEmpty(string, string) ArgumentException.Message ArgumentException.ParamName Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors ArgumentRequestUriException(string) Initializes a new instance of the ArgumentRequestUriException class with a specified error message. public ArgumentRequestUriException(string message) Parameters message string The message that describes the error. ArgumentRequestUriException(string, string?) Initializes a new instance of the ArgumentRequestUriException class with a specified error message and the name of the parameter that caused this exception. public ArgumentRequestUriException(string message, string? paramName) Parameters message string The message that describes the error. paramName string The name of the parameter that caused the exception. Methods ThrowIfNullOrWhiteSpace(string?, string?) Throws an ArgumentRequestUriException if the specified argument is null or consists only of white-space characters. public static void ThrowIfNullOrWhiteSpace(string? argument, string? paramName) Parameters argument string The string argument to check. paramName string The name of the parameter that caused the exception. Exceptions ArgumentRequestUriException Thrown when the argument is null or white-space. ThrowIfNullOrWhiteSpace(Uri?, string?) Throws an ArgumentRequestUriException if the specified Uri argument is null or consists only of white-space characters. public static void ThrowIfNullOrWhiteSpace(Uri? argument, string? paramName) Parameters argument Uri The Uri argument to check. paramName string The name of the parameter that caused the exception. Exceptions ArgumentRequestUriException Thrown when the argument is null or its string representation is white-space."
  },
  "reference/WebServiceClient.Attributes.CastAttribute.html": {
    "href": "reference/WebServiceClient.Attributes.CastAttribute.html",
    "title": "Class CastAttribute | ArtifactoryWebApi",
    "summary": "Class CastAttribute Namespace WebServiceClient.Attributes Assembly ArtifactoryWebApi.dll Specifies the class name to be used for casting. [AttributeUsage(AttributeTargets.Class)] public class CastAttribute : Attribute Inheritance object Attribute CastAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CastAttribute(string) Specifies the class name to be used for casting. public CastAttribute(string className) Parameters className string Properties ClassName Gets or sets the class name for casting. public string ClassName { get; set; } Property Value string"
  },
  "reference/WebServiceClient.Attributes.ModelAttribute.html": {
    "href": "reference/WebServiceClient.Attributes.ModelAttribute.html",
    "title": "Class ModelAttribute | ArtifactoryWebApi",
    "summary": "Class ModelAttribute Namespace WebServiceClient.Attributes Assembly ArtifactoryWebApi.dll Indicates that a class is a model used by the WebServiceClient. [AttributeUsage(AttributeTargets.Class)] public class ModelAttribute : Attribute Inheritance object Attribute ModelAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ModelAttribute() Indicates that a class is a model used by the WebServiceClient. public ModelAttribute()"
  },
  "reference/WebServiceClient.Attributes.ModelIgnoreAttribute.html": {
    "href": "reference/WebServiceClient.Attributes.ModelIgnoreAttribute.html",
    "title": "Class ModelIgnoreAttribute | ArtifactoryWebApi",
    "summary": "Class ModelIgnoreAttribute Namespace WebServiceClient.Attributes Assembly ArtifactoryWebApi.dll Specifies that a property should be ignored by the model processing logic. [AttributeUsage(AttributeTargets.Property)] public class ModelIgnoreAttribute : Attribute Inheritance object Attribute ModelIgnoreAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "reference/WebServiceClient.Attributes.ModelPropertyParametersAttribute.html": {
    "href": "reference/WebServiceClient.Attributes.ModelPropertyParametersAttribute.html",
    "title": "Class ModelPropertyParametersAttribute | ArtifactoryWebApi",
    "summary": "Class ModelPropertyParametersAttribute Namespace WebServiceClient.Attributes Assembly ArtifactoryWebApi.dll Attribute to specify additional parameters for a model property, such as the JSON property name. [AttributeUsage(AttributeTargets.Property)] public class ModelPropertyParametersAttribute : Attribute Inheritance object Attribute ModelPropertyParametersAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties JsonPropertyName Gets or sets the JSON property name for the model property. public string? JsonPropertyName { get; set; } Property Value string"
  },
  "reference/WebServiceClient.Attributes.TestAttribute.html": {
    "href": "reference/WebServiceClient.Attributes.TestAttribute.html",
    "title": "Class TestAttribute | ArtifactoryWebApi",
    "summary": "Class TestAttribute Namespace WebServiceClient.Attributes Assembly ArtifactoryWebApi.dll Indicates that a class is a model used by the WebServiceClient. [AttributeUsage(AttributeTargets.Class)] public class TestAttribute : Attribute Inheritance object Attribute TestAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TestAttribute(int, TestAttributeAccess, string, bool) Initializes a new instance of the TestAttribute class with the specified value, access level, name, and flag. public TestAttribute(int value, TestAttributeAccess access, string name, bool flag) Parameters value int The integer value associated with the attribute. access TestAttributeAccess The access level for the attribute. name string The name associated with the attribute. flag bool A boolean flag for the attribute. TestAttribute(string, int) Initializes a new instance of the TestAttribute class with the specified string and integer values. public TestAttribute(string strx, int intx) Parameters strx string The string value associated with the attribute. intx int The integer value associated with the attribute. Properties Access Gets the access level for the attribute. public TestAttributeAccess Access { get; } Property Value TestAttributeAccess Access2 Gets or sets the secondary access level for the attribute. public TestAttributeAccess Access2 { get; set; } Property Value TestAttributeAccess Flag Gets a boolean flag for the attribute. public bool Flag { get; } Property Value bool Flag2 Gets or sets the secondary boolean flag for the attribute. public bool Flag2 { get; set; } Property Value bool IntX Gets the integer value associated with the attribute. public int IntX { get; } Property Value int Name Gets the name associated with the attribute. public string? Name { get; } Property Value string Name2 Gets or sets the secondary name associated with the attribute. public string? Name2 { get; set; } Property Value string StrX Gets the string value associated with the attribute. public string? StrX { get; } Property Value string Value Gets the integer value associated with the attribute. public int Value { get; } Property Value int Value2 Gets or sets the secondary integer value associated with the attribute. public int Value2 { get; set; } Property Value int"
  },
  "reference/WebServiceClient.Attributes.TestAttributeAccess.html": {
    "href": "reference/WebServiceClient.Attributes.TestAttributeAccess.html",
    "title": "Enum TestAttributeAccess | ArtifactoryWebApi",
    "summary": "Enum TestAttributeAccess Namespace WebServiceClient.Attributes Assembly ArtifactoryWebApi.dll Specifies the access level for the TestAttribute. public enum TestAttributeAccess Fields Internal = 1 Internal access level. Private = 3 Private access level. Protected = 2 Protected access level. Public = 0 Public access level."
  },
  "reference/WebServiceClient.Attributes.html": {
    "href": "reference/WebServiceClient.Attributes.html",
    "title": "Namespace WebServiceClient.Attributes | ArtifactoryWebApi",
    "summary": "Namespace WebServiceClient.Attributes Classes CastAttribute Specifies the class name to be used for casting. ModelAttribute Indicates that a class is a model used by the WebServiceClient. ModelIgnoreAttribute Specifies that a property should be ignored by the model processing logic. ModelPropertyParametersAttribute Attribute to specify additional parameters for a model property, such as the JSON property name. TestAttribute Indicates that a class is a model used by the WebServiceClient. Enums TestAttributeAccess Specifies the access level for the TestAttribute."
  },
  "reference/WebServiceClient.Authenticator.IAuthenticator.html": {
    "href": "reference/WebServiceClient.Authenticator.IAuthenticator.html",
    "title": "Interface IAuthenticator | ArtifactoryWebApi",
    "summary": "Interface IAuthenticator Namespace WebServiceClient.Authenticator Assembly ArtifactoryWebApi.dll Defines a method to authenticate a web jira client. public interface IAuthenticator Methods Authenticate(WebService, HttpClient) Authenticates the specified web jira using the provided HTTP client. void Authenticate(WebService service, HttpClient client) Parameters service WebService The web jira to authenticate. client HttpClient The HTTP client used for authentication."
  },
  "reference/WebServiceClient.Authenticator.html": {
    "href": "reference/WebServiceClient.Authenticator.html",
    "title": "Namespace WebServiceClient.Authenticator | ArtifactoryWebApi",
    "summary": "Namespace WebServiceClient.Authenticator Interfaces IAuthenticator Defines a method to authenticate a web jira client."
  },
  "reference/WebServiceClient.JsonConverters.JsonDateTimeConverter.html": {
    "href": "reference/WebServiceClient.JsonConverters.JsonDateTimeConverter.html",
    "title": "Class JsonDateTimeConverter | ArtifactoryWebApi",
    "summary": "Class JsonDateTimeConverter Namespace WebServiceClient.JsonConverters Assembly ArtifactoryWebApi.dll Converts DateTime? objects to and from JSON, if \":\" is missing in time zone. public class JsonDateTimeConverter : JsonConverter<DateTime?> Inheritance object JsonConverter JsonConverter<DateTime?> JsonDateTimeConverter Inherited Members JsonConverter<DateTime?>.CanConvert(Type) JsonConverter<DateTime?>.ReadAsPropertyName(ref Utf8JsonReader, Type, JsonSerializerOptions) JsonConverter<DateTime?>.WriteAsPropertyName(Utf8JsonWriter, DateTime?, JsonSerializerOptions) JsonConverter<DateTime?>.HandleNull JsonConverter<DateTime?>.Type object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Read(ref Utf8JsonReader, Type, JsonSerializerOptions) Reads and converts the JSON to a DateTime? object. public override DateTime? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) Parameters reader Utf8JsonReader The reader. typeToConvert Type The type to convert. options JsonSerializerOptions The serializer options. Returns DateTime? The converted DateTime? object. Write(Utf8JsonWriter, DateTime?, JsonSerializerOptions) Writes a DateTime? object as a JSON string. public override void Write(Utf8JsonWriter writer, DateTime? value, JsonSerializerOptions options) Parameters writer Utf8JsonWriter The writer. value DateTime? The value to write. options JsonSerializerOptions The serializer options."
  },
  "reference/WebServiceClient.JsonConverters.html": {
    "href": "reference/WebServiceClient.JsonConverters.html",
    "title": "Namespace WebServiceClient.JsonConverters | ArtifactoryWebApi",
    "summary": "Namespace WebServiceClient.JsonConverters Classes JsonDateTimeConverter Converts DateTime? objects to and from JSON, if \":\" is missing in time zone."
  },
  "reference/WebServiceClient.JsonService.html": {
    "href": "reference/WebServiceClient.JsonService.html",
    "title": "Class JsonService | ArtifactoryWebApi",
    "summary": "Class JsonService Namespace WebServiceClient Assembly ArtifactoryWebApi.dll Represents an abstract base class for JSON-based web services, providing common functionality for HTTP operations. public abstract class JsonService : WebService, IDisposable Inheritance object WebService JsonService Implements IDisposable Derived Artifactory Inherited Members WebService.client WebService.AuthenticationTestUrl WebService.httpClientHandler WebService.Dispose() WebService.Host WebService.IsConnected WebService.ErrorCheckAsync(HttpResponseMessage, string, CancellationToken) WebService.ErrorHandlingAsync(HttpResponseMessage, string, CancellationToken) WebService.TestAutentication() WebService.GetVersionAsync(CancellationToken) WebService.GetVersionStringAsync(CancellationToken) WebService.GetStringAsync(string, CancellationToken, string) WebService.GetFromStreamAsync(string, CancellationToken, string) WebService.FoundAsync(string, CancellationToken, string) WebService.DownloadAsync(Uri, string, CancellationToken, string) WebService.DownloadAsync(string, string, CancellationToken, string) WebService.DownloadLocationAsync(string, string, CancellationToken, string) WebService.DownloadLocationAsync(Uri, string, CancellationToken, string) WebService.PutAsync(string, HttpContent, CancellationToken, string) WebService.PutFilesAsync(string, IEnumerable<KeyValuePair<string, Stream>>, CancellationToken, string) WebService.PostAsync(string, CancellationToken, string) WebService.PostFilesAsync(string, IEnumerable<KeyValuePair<string, Stream>>, CancellationToken, string) WebService.DeleteAsync(string, CancellationToken, string) WebService.QueryEntry((string Name, object Value)) WebService.CombineUrl(params string[]) WebService.CombineUrl(string, params (string Name, object Value)[]) WebService.CombineUrl(string, string, params (string Name, object Value)[]) WebService.CombineUrl(string, string, string, params (string Name, object Value)[]) WebService.CombineUrl(string, string, string, string, params (string Name, object Value)[]) WebService.CombineUrl(string, string, string, string, string, params (string Name, object Value)[]) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks Initializes a new instance of the JsonService class using the specified host, authenticator, application name, and JSON serializer context. Constructors JsonService(string, string, JsonSerializerContext) Initializes a new instance of the JsonService class using the specified store key, application name, and JSON serializer context. public JsonService(string storeKey, string appName, JsonSerializerContext context) Parameters storeKey string The key used to retrieve the jira host and authenticator from the KeyStore. appName string The name of the application using the jira. context JsonSerializerContext The JsonSerializerContext used for JSON serialization and deserialization. JsonService(Uri, IAuthenticator?, string, JsonSerializerContext) Represents an abstract base class for JSON-based web services, providing common functionality for HTTP operations. protected JsonService(Uri host, IAuthenticator? authenticator, string appName, JsonSerializerContext context) Parameters host Uri The jira host URI. authenticator IAuthenticator The authenticator to use for the jira. appName string The name of the application using the jira. context JsonSerializerContext The JsonSerializerContext used for JSON serialization and deserialization. Remarks Initializes a new instance of the JsonService class using the specified host, authenticator, application name, and JSON serializer context. Fields context The JSON serializer context. protected readonly JsonSerializerContext context Field Value JsonSerializerContext Methods DeleteAsJsonAsync<OUT>(string, CancellationToken, string) Sends a DELETE request to the specified URI and returns the response body deserialized as an object of type OUT. protected Task<OUT?> DeleteAsJsonAsync<OUT>(string requestUri, CancellationToken cancellationToken, string memberName = \"\") Parameters requestUri string The request URI. cancellationToken CancellationToken The cancellation token. memberName string The name of the calling member. This is automatically set by the compiler. Returns Task<OUT> A task that represents the asynchronous operation. The task result contains the deserialized response object. Type Parameters OUT The type of the response object. DeleteJsonAsync<IN, OUT>(string, IN, CancellationToken, string) Sends a DELETE request to the specified URI with the provided object serialized as JSON and returns the response body deserialized as an object of type OUT. protected Task<OUT?> DeleteJsonAsync<IN, OUT>(string requestUri, IN obj, CancellationToken cancellationToken, string memberName = \"\") Parameters requestUri string The request URI. obj IN The object to send. cancellationToken CancellationToken The cancellation token. memberName string The name of the calling member. Returns Task<OUT> A task that represents the asynchronous operation. The task result contains the deserialized response object. Type Parameters IN The type of the request object. OUT The type of the response object. GetFromJsonAsync<OUT>(string, CancellationToken, string) Sends a GET request to the specified URI and returns the response body deserialized as an object of type OUT. protected Task<OUT?> GetFromJsonAsync<OUT>(string requestUri, CancellationToken cancellationToken, string memberName = \"\") Parameters requestUri string The request URI. cancellationToken CancellationToken The cancellation token. memberName string The name of the calling member. Returns Task<OUT> A task that represents the asynchronous operation. The task result contains the deserialized response object. Type Parameters OUT The type of the response object. InitializeClient(HttpClient) Configures the HttpClient instance for JSON-based web jira requests. protected override void InitializeClient(HttpClient client) Parameters client HttpClient The HttpClient to be initialized or configured. Remarks Sets the default request headers to accept JSON and other common content types. Override this method to apply additional client configuration before making requests. PatchAsJsonAsync<IN, OUT>(string, IN, CancellationToken, string) Sends a PATCH request to the specified URI with the provided object serialized as JSON and returns the response body deserialized as an object of type OUT. protected Task<OUT?> PatchAsJsonAsync<IN, OUT>(string requestUri, IN obj, CancellationToken cancellationToken, string memberName = \"\") Parameters requestUri string The request URI. obj IN The object to send. cancellationToken CancellationToken The cancellation token. memberName string The name of the calling member. Returns Task<OUT> A task that represents the asynchronous operation. The task result contains the deserialized response object. Type Parameters IN The type of the request object. OUT The type of the response object. PostAsJsonAsync<IN>(string, IN, CancellationToken, string) Sends a POST request to the specified URI with the provided object serialized as JSON. protected Task PostAsJsonAsync<IN>(string requestUri, IN obj, CancellationToken cancellationToken, string memberName = \"\") Parameters requestUri string The request URI. obj IN The object to send. cancellationToken CancellationToken The cancellation token. memberName string The name of the calling member. Returns Task A task that represents the asynchronous operation. Type Parameters IN The type of the request object. PostFilesFromJsonAsync<OUT>(string, IEnumerable<KeyValuePair<string, Stream>>, CancellationToken, string) Sends a POST request to the specified URI with the provided files and returns the response body deserialized as an object of type OUT. protected Task<OUT?> PostFilesFromJsonAsync<OUT>(string requestUri, IEnumerable<KeyValuePair<string, Stream>> files, CancellationToken cancellationToken, string memberName = \"\") Parameters requestUri string The request URI. files IEnumerable<KeyValuePair<string, Stream>> The files to send. cancellationToken CancellationToken The cancellation token. memberName string The name of the calling member. Returns Task<OUT> A task that represents the asynchronous operation. The task result contains the deserialized response object. Type Parameters OUT The type of the response object. PostFromJsonAsync<OUT>(string, CancellationToken, string) Sends a POST request to the specified URI and returns the response body deserialized as an object of type OUT. protected Task<OUT?> PostFromJsonAsync<OUT>(string requestUri, CancellationToken cancellationToken, string memberName = \"\") Parameters requestUri string The request URI. cancellationToken CancellationToken The cancellation token. memberName string The name of the calling member. Returns Task<OUT> A task that represents the asynchronous operation. The task result contains the deserialized response object. Type Parameters OUT The type of the response object. PutAsJsonAsync<IN>(string, IN, CancellationToken, string) Sends a PUT request to the specified URI with the provided object serialized as JSON. protected Task PutAsJsonAsync<IN>(string requestUri, IN obj, CancellationToken cancellationToken, string memberName = \"\") Parameters requestUri string The request URI. obj IN The object to send. cancellationToken CancellationToken The cancellation token. memberName string The name of the calling member. Returns Task A task that represents the asynchronous operation. Type Parameters IN The type of the request object. PutAsJsonAsync<IN, OUT>(string, IN, CancellationToken, string) Sends a PUT request to the specified URI with the provided object serialized as JSON and returns the response body deserialized as an object of type OUT. protected Task<OUT?> PutAsJsonAsync<IN, OUT>(string requestUri, IN obj, CancellationToken cancellationToken, string memberName = \"\") Parameters requestUri string The request URI. obj IN The object to send. cancellationToken CancellationToken The cancellation token. memberName string The name of the calling member. Returns Task<OUT> A task that represents the asynchronous operation. The task result contains the deserialized response object. Type Parameters IN The type of the request object. OUT The type of the response object."
  },
  "reference/WebServiceClient.Store.AuthenticationType.html": {
    "href": "reference/WebServiceClient.Store.AuthenticationType.html",
    "title": "Enum AuthenticationType | ArtifactoryWebApi",
    "summary": "Enum AuthenticationType Namespace WebServiceClient.Store Assembly ArtifactoryWebApi.dll Specifies the type of authentication used in the web jira client. [JsonConverter(typeof(JsonStringEnumConverter<AuthenticationType>))] public enum AuthenticationType Fields Basic = 1 Basic authentication. Bearer = 3 Bearer token authentication. BearerAndJFrogApi = 4 Bearer token authentication combined with JFrog API authentication. None = 0 No authentication. Token = 2 Token-based authentication."
  },
  "reference/WebServiceClient.Store.KeyStore.html": {
    "href": "reference/WebServiceClient.Store.KeyStore.html",
    "title": "Class KeyStore | ArtifactoryWebApi",
    "summary": "Class KeyStore Namespace WebServiceClient.Store Assembly ArtifactoryWebApi.dll Represents a storage for key-value pairs related to web jira authentication and configuration. Provides methods to retrieve and initialize key store items from a JSON file. public class KeyStore Inheritance object KeyStore Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Authentication Gets or sets the type of authentication used. [JsonPropertyName(\"authentication\")] public AuthenticationType Authentication { get; set; } Property Value AuthenticationType Authenticator Gets an IAuthenticator instance based on the AuthenticationType property. Returns null if AuthenticationType is None. [JsonIgnore] public IAuthenticator? Authenticator { get; } Property Value IAuthenticator Comment Gets or sets the comment. [JsonPropertyName(\"comment\")] public string? Comment { get; set; } Property Value string Email Gets or sets the email address. [JsonPropertyName(\"email\")] public string? Email { get; set; } Property Value string Host Gets or sets the host URL. [JsonPropertyName(\"host\")] public string Host { get; set; } Property Value string Login Gets or sets the login name. [JsonPropertyName(\"login\")] public string? Login { get; set; } Property Value string Password Gets or sets the password. [JsonPropertyName(\"password\")] public string? Password { get; set; } Property Value string Token Gets or sets the authentication token. [JsonPropertyName(\"token\")] public string? Token { get; set; } Property Value string TokenExpire Gets or sets the expiration date and time of the authentication token. [JsonPropertyName(\"tokenexpire\")] public DateTime? TokenExpire { get; set; } Property Value DateTime? TokenName Gets or sets the authentication token name. [JsonPropertyName(\"tokenname\")] public string? TokenName { get; set; } Property Value string Update Url to token update page. [JsonPropertyName(\"update\")] public string? Update { get; set; } Property Value string Url Gets the URI for the host specified in the Host property. [JsonIgnore] public Uri Url { get; } Property Value Uri User Gets or sets the user name. [JsonPropertyName(\"user\")] public string? User { get; set; } Property Value string Verify Gets or sets the URL to verify the host. [JsonPropertyName(\"verify\")] public string? Verify { get; set; } Property Value string Methods Key(string) Retrieves a KeyStore item by name. If the items dictionary is not initialized, it loads from the JSON file or creates a demo file if it doesn't exist. public static KeyStore? Key(string name) Parameters name string The name of the KeyStore item to retrieve. Returns KeyStore The KeyStore item if found; otherwise, null."
  },
  "reference/WebServiceClient.Store.html": {
    "href": "reference/WebServiceClient.Store.html",
    "title": "Namespace WebServiceClient.Store | ArtifactoryWebApi",
    "summary": "Namespace WebServiceClient.Store Classes KeyStore Represents a storage for key-value pairs related to web jira authentication and configuration. Provides methods to retrieve and initialize key store items from a JSON file. Enums AuthenticationType Specifies the type of authentication used in the web jira client."
  },
  "reference/WebServiceClient.WebService.html": {
    "href": "reference/WebServiceClient.WebService.html",
    "title": "Class WebService | ArtifactoryWebApi",
    "summary": "Class WebService Namespace WebServiceClient Assembly ArtifactoryWebApi.dll Represents an abstract base class for web services, providing common functionality for HTTP operations and authentication. public abstract class WebService : IDisposable Inheritance object WebService Implements IDisposable Derived JsonService Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors WebService(Uri, IAuthenticator?, string?) Initializes a new instance of the WebService class with the specified host, authenticator, and application name. public WebService(Uri host, IAuthenticator? authenticator = null, string? appName = null) Parameters host Uri The base URI of the web jira. authenticator IAuthenticator The authenticator used to authenticate the web jira client. appName string The name of the application. Fields client The HTTP client used for making requests. protected HttpClient? client Field Value HttpClient httpClientHandler The HTTP client handler with custom settings. protected readonly HttpClientHandler httpClientHandler Field Value HttpClientHandler Properties AuthenticationTestUrl The URL used to test authentication, can be overridden by derived classes. protected virtual string? AuthenticationTestUrl { get; } Property Value string Host Gets the base URI of the web jira. public Uri Host { get; } Property Value Uri IsConnected Gets a value indicating whether the web jira is connected. public bool IsConnected { get; } Property Value bool Methods CombineUrl(string, string, string, string, string, params (string Name, object? Value)[]) Combines the specified URL parts and name-value pairs into a single URL. public string CombineUrl(string urlPartA, string urlPartB, string urlPartC, string urlPartD, string urlPartE, params (string Name, object? Value)[] values) Parameters urlPartA string The first URL part. urlPartB string The second URL part. urlPartC string The third URL part. urlPartD string The fourth URL part. urlPartE string The fifth URL part. values (string Name, object Value)[] The name and value pairs. Returns string The combined URL. CombineUrl(string, string, string, string, params (string Name, object? Value)[]) Combines the specified URL parts and name-value pairs into a single URL. public string CombineUrl(string urlPartA, string urlPartB, string urlPartC, string urlPartD, params (string Name, object? Value)[] values) Parameters urlPartA string The first URL part. urlPartB string The second URL part. urlPartC string The third URL part. urlPartD string The fourth URL part. values (string Name, object Value)[] The name and value pairs. Returns string The combined URL. CombineUrl(string, string, string, params (string Name, object? Value)[]) Combines the specified URL parts and name-value pairs into a single URL. public string CombineUrl(string urlPartA, string urlPartB, string urlPartC, params (string Name, object? Value)[] values) Parameters urlPartA string The first URL part. urlPartB string The second URL part. urlPartC string The third URL part. values (string Name, object Value)[] The name and value pairs. Returns string The combined URL. CombineUrl(string, string, params (string Name, object? Value)[]) Combines the specified URL parts and name-value pairs into a single URL. public string CombineUrl(string urlPartA, string urlPartB, params (string Name, object? Value)[] values) Parameters urlPartA string The first URL part. urlPartB string The second URL part. values (string Name, object Value)[] The name and value pairs. Returns string The combined URL. CombineUrl(string, params (string Name, object? Value)[]) Combines the specified URL part and name-value pairs into a single URL. public string CombineUrl(string urlPartA, params (string Name, object? Value)[] values) Parameters urlPartA string The URL part. values (string Name, object Value)[] The name and value pairs. Returns string The combined URL. CombineUrl(params string[]) Combines the specified URL parts into a single URL. public static string CombineUrl(params string[] urlParts) Parameters urlParts string[] The URL parts. Returns string The combined URL. DeleteAsync(string, CancellationToken, string) Sends a DELETE request to the specified URI. protected Task DeleteAsync(string requestUri, CancellationToken cancellationToken, string memberName = \"\") Parameters requestUri string The request URI. cancellationToken CancellationToken The cancellation token. memberName string The name of the calling member. Returns Task A task that represents the asynchronous operation. Dispose() Releases the resources used by the WebService class. public void Dispose() DownloadAsync(string, string, CancellationToken, string) Sends a GET request to the specified URI and downloads the response body to the specified file path. protected Task DownloadAsync(string requestUri, string filePath, CancellationToken cancellationToken, string memberName = \"\") Parameters requestUri string The request URI. filePath string The file path to save the response body. cancellationToken CancellationToken The cancellation token. memberName string The name of the calling member. Returns Task A task that represents the asynchronous operation. DownloadAsync(Uri, string, CancellationToken, string) Sends a GET request to the specified URI and downloads the response body to the specified file path. protected Task DownloadAsync(Uri requestUri, string filePath, CancellationToken cancellationToken, string memberName = \"\") Parameters requestUri Uri The request URI. filePath string The file path to save the response body. cancellationToken CancellationToken The cancellation token. memberName string The name of the calling member. Returns Task A task that represents the asynchronous operation. DownloadLocationAsync(string, string, CancellationToken, string) Sends a GET request to the specified URI, follows the response location if present, and downloads the response body to the specified file path. protected Task DownloadLocationAsync(string requestUri, string filePath, CancellationToken cancellationToken, string memberName = \"\") Parameters requestUri string The request URI as a string. filePath string The file path to save the response body. cancellationToken CancellationToken The cancellation token to cancel the operation. memberName string The name of the calling member. This is automatically set by the compiler. Returns Task A task that represents the asynchronous operation. DownloadLocationAsync(Uri, string, CancellationToken, string) Sends a GET request to the specified URI, follows the response location if present, and downloads the response body to the specified file path. protected Task DownloadLocationAsync(Uri requestUri, string filePath, CancellationToken cancellationToken, string memberName = \"\") Parameters requestUri Uri The request URI as a Uri. filePath string The file path to save the response body. cancellationToken CancellationToken The cancellation token to cancel the operation. memberName string The name of the calling member. This is automatically set by the compiler. Returns Task A task that represents the asynchronous operation. ErrorCheckAsync(HttpResponseMessage, string, CancellationToken) Checks the HTTP response for errors and handles them if any are found. protected virtual Task ErrorCheckAsync(HttpResponseMessage response, string memberName, CancellationToken cancellationToken) Parameters response HttpResponseMessage The HTTP response message to check for errors. memberName string The name of the calling member. This is automatically set by the compiler. cancellationToken CancellationToken The cancellation token to cancel the operation. Returns Task A task that represents the asynchronous operation. Remarks If the response indicates a failure, this method calls ErrorHandlingAsync(HttpResponseMessage, string, CancellationToken) to handle the error. Override if the error handling needs to be customized. ErrorHandlingAsync(HttpResponseMessage, string, CancellationToken) Handles errors in HTTP responses. protected virtual Task ErrorHandlingAsync(HttpResponseMessage response, string memberName, CancellationToken cancellationToken) Parameters response HttpResponseMessage The HTTP response message. memberName string The name of the calling member. cancellationToken CancellationToken The cancellation token. Returns Task A task that represents the asynchronous operation. FoundAsync(string, CancellationToken, string) Sends a GET request to the specified URI and returns a value indicating whether the resource was found. protected Task<bool> FoundAsync(string requestUri, CancellationToken cancellationToken, string memberName = \"\") Parameters requestUri string The request URI. cancellationToken CancellationToken The cancellation token. memberName string The name of the calling member. Returns Task<bool> A task that represents the asynchronous operation. The task result contains a value indicating whether the resource was found. GetFromStreamAsync(string, CancellationToken, string) Sends a GET request to the specified URI and returns the response body as a stream. protected Task<Stream> GetFromStreamAsync(string requestUri, CancellationToken cancellationToken, string memberName = \"\") Parameters requestUri string The request URI. cancellationToken CancellationToken The cancellation token. memberName string The name of the calling member. Returns Task<Stream> A task that represents the asynchronous operation. The task result contains the response body as a stream. GetStringAsync(string, CancellationToken, string) Sends a GET request to the specified URI and returns the response body as a string. protected Task<string?> GetStringAsync(string requestUri, CancellationToken cancellationToken, string memberName = \"\") Parameters requestUri string The request URI. cancellationToken CancellationToken The cancellation token. memberName string The name of the calling member. Returns Task<string> A task that represents the asynchronous operation. The task result contains the response body as a string. GetVersionAsync(CancellationToken) Gets the version of the web jira asynchronously. public virtual Task<Version?> GetVersionAsync(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken The cancellation token to cancel the operation. Returns Task<Version> A task that represents the asynchronous operation. The task result contains the version of the web jira. GetVersionStringAsync(CancellationToken) Gets the version of the web jira as a string asynchronously. public virtual Task<string?> GetVersionStringAsync(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken The cancellation token to cancel the operation. Returns Task<string> A task that represents the asynchronous operation. The task result contains the version of the web jira as a string. InitializeClient(HttpClient) Allows derived classes to customize the initialization of the HttpClient instance. protected virtual void InitializeClient(HttpClient client) Parameters client HttpClient The HttpClient to be initialized or configured. Remarks Override this method in a derived class to set additional headers, configure default request options, or apply other custom settings to the HTTP client before it is used for requests. PostAsync(string, CancellationToken, string) Sends a POST request to the specified URI. protected Task PostAsync(string requestUri, CancellationToken cancellationToken, string memberName = \"\") Parameters requestUri string The request URI. cancellationToken CancellationToken The cancellation token. memberName string The name of the calling member. Returns Task A task that represents the asynchronous operation. PostFilesAsync(string, IEnumerable<KeyValuePair<string, Stream>>, CancellationToken, string) Sends a POST request to the specified URI with the provided files. protected Task PostFilesAsync(string requestUri, IEnumerable<KeyValuePair<string, Stream>> files, CancellationToken cancellationToken, string memberName = \"\") Parameters requestUri string The request URI. files IEnumerable<KeyValuePair<string, Stream>> The files to send. cancellationToken CancellationToken The cancellation token. memberName string The name of the calling member. Returns Task A task that represents the asynchronous operation. PutAsync(string, HttpContent, CancellationToken, string) Sends a PUT request to the specified URI with the provided content. protected Task PutAsync(string requestUri, HttpContent content, CancellationToken cancellationToken, string memberName = \"\") Parameters requestUri string The request URI. content HttpContent The HTTP content to send. cancellationToken CancellationToken The cancellation token. memberName string The name of the calling member. Returns Task A task that represents the asynchronous operation. PutFilesAsync(string, IEnumerable<KeyValuePair<string, Stream>>, CancellationToken, string) Sends a PUT request to the specified URI with the provided files. protected Task PutFilesAsync(string requestUri, IEnumerable<KeyValuePair<string, Stream>> files, CancellationToken cancellationToken, string memberName = \"\") Parameters requestUri string The request URI. files IEnumerable<KeyValuePair<string, Stream>> The files to send. cancellationToken CancellationToken The cancellation token. memberName string The name of the calling member. Returns Task A task that represents the asynchronous operation. QueryEntry((string Name, object? Value)) Creates a query string entry from the specified name and value. protected virtual string QueryEntry((string Name, object? Value) entry) Parameters entry (string Name, object Value) The name and value pair. Returns string The query string entry. TestAutentication() Tests the authentication by sending a request to the AuthenticationTestUrl. protected void TestAutentication() Remarks Throws AuthenticationException if authentication fails."
  },
  "reference/WebServiceClient.WebServiceException.html": {
    "href": "reference/WebServiceClient.WebServiceException.html",
    "title": "Class WebServiceException | ArtifactoryWebApi",
    "summary": "Class WebServiceException Namespace WebServiceClient Assembly ArtifactoryWebApi.dll Represents an exception that occurs during web jira operations. public class WebServiceException : Exception, ISerializable Inheritance object Exception WebServiceException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors WebServiceException(string?) Initializes a new instance of the WebServiceException class with a specified error message. public WebServiceException(string? message) Parameters message string The message that describes the error. WebServiceException(string?, Uri?, HttpStatusCode, string?, string) Initializes a new instance of the WebServiceException class with a specified error message, request URI, HTTP status code, reason phrase, and member name. public WebServiceException(string? message, Uri? requestUri, HttpStatusCode statusCode, string? reasonPhrase, string memberName) Parameters message string The message that describes the error. requestUri Uri The URI of the web request that caused the error. statusCode HttpStatusCode The HTTP status code returned by the web service. reasonPhrase string The reason phrase returned by the web service. memberName string The name of the member that caused the error. Properties MemberName Gets the name of the member that caused the error. public string? MemberName { get; } Property Value string ReasonPhrase Gets the reason phrase returned by the web jira. public string? ReasonPhrase { get; } Property Value string RequestUri Gets the URI of the web request that caused the error. public Uri? RequestUri { get; } Property Value Uri StatusCode Gets the HTTP status code returned by the web jira. public HttpStatusCode StatusCode { get; } Property Value HttpStatusCode Methods ThrowHttpError(string?, HttpResponseMessage, string) Throws a WebServiceException with the specified message and HTTP response. public static void ThrowHttpError(string? message, HttpResponseMessage response, string memberName) Parameters message string The message that describes the error. response HttpResponseMessage The HTTP response that caused the error. memberName string The name of the member that caused the error. Exceptions WebServiceException Always thrown with the specified message and HTTP response details. ThrowIfNotConnected(HttpClient?) Throws a WebServiceException if the specified HTTP client is null, indicating that the web jira is not connected. public static void ThrowIfNotConnected(HttpClient? client) Parameters client HttpClient The HTTP client to check. Exceptions WebServiceException Thrown if the HTTP client is null. ThrowIfNullOrNotConnected(WebService?) Throws a WebServiceException if the specified web jira is null or not connected. public static void ThrowIfNullOrNotConnected(WebService? service) Parameters service WebService The web jira to check. Exceptions WebServiceException Thrown if the web jira is null or not connected. ToString() Returns a string that represents the current WebServiceException. public override string ToString() Returns string A string representation of the current exception."
  },
  "reference/WebServiceClient.XSerializer.IXSerializable.html": {
    "href": "reference/WebServiceClient.XSerializer.IXSerializable.html",
    "title": "Interface IXSerializable | ArtifactoryWebApi",
    "summary": "Interface IXSerializable Namespace WebServiceClient.XSerializer Assembly ArtifactoryWebApi.dll Defines methods for XML serialization and deserialization. public interface IXSerializable Remarks The default XML Serializer is not trimmable and AOT compatible. Methods ReadX(XElement) Reads the object from the specified XML element. void ReadX(XElement elm) Parameters elm XElement The XML element to read from."
  },
  "reference/WebServiceClient.XSerializer.XSerializableExt.html": {
    "href": "reference/WebServiceClient.XSerializer.XSerializableExt.html",
    "title": "Class XSerializableExt | ArtifactoryWebApi",
    "summary": "Class XSerializableExt Namespace WebServiceClient.XSerializer Assembly ArtifactoryWebApi.dll Provides extension methods for XML serialization and deserialization. public static class XSerializableExt Inheritance object XSerializableExt Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks The default XML Serializer is not trimmable and AOT compatible. Methods XDeserialize<T>(string?, string, string) Deserializes an XML string into an object of type T using the specified root element name and namespace. public static T? XDeserialize<T>(this string? value, string rootElementName, string namespaceName) where T : IXSerializable, new() Parameters value string The XML string to deserialize. rootElementName string The root element name of the XML. namespaceName string The namespace of the root element. Returns T The deserialized object of type T, or default if the value is null. Type Parameters T The type of the object to deserialize. XDeserialize<T>(string?, XName) Deserializes an XML string into an object of type T. public static T? XDeserialize<T>(this string? value, XName rootName) where T : IXSerializable, new() Parameters value string The XML string to deserialize. rootName XName The root element name of the XML. Returns T The deserialized object of type T, or default if the value is null. Type Parameters T The type of the object to deserialize."
  },
  "reference/WebServiceClient.XSerializer.html": {
    "href": "reference/WebServiceClient.XSerializer.html",
    "title": "Namespace WebServiceClient.XSerializer | ArtifactoryWebApi",
    "summary": "Namespace WebServiceClient.XSerializer Classes XSerializableExt Provides extension methods for XML serialization and deserialization. Interfaces IXSerializable Defines methods for XML serialization and deserialization."
  },
  "reference/WebServiceClient.html": {
    "href": "reference/WebServiceClient.html",
    "title": "Namespace WebServiceClient | ArtifactoryWebApi",
    "summary": "Namespace WebServiceClient Classes ArgumentRequestUriException Exception thrown when the request URI argument is invalid. JsonService Represents an abstract base class for JSON-based web services, providing common functionality for HTTP operations. WebService Represents an abstract base class for web services, providing common functionality for HTTP operations and authentication. WebServiceException Represents an exception that occurs during web jira operations."
  }
}